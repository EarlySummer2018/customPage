import { ref, onMounted } from 'vue'
import { px2rpx, removeEmptyKeys } from '@/utils'
export const useModelData = (data: UTSJSONObject) : UTSJSONObject => {
	/** 组件数据 */
	const modelContent = ref<UTSJSONObject[]>([])
	/** 组件属性 */
	const modelOptions = ref<UTSJSONObject>({})
	/** 组件样式 */
	const modelStyle = ref<UTSJSONObject>({})

	/** 设置外层容器样式 */
	const setContainerStyle = () : string.cssPropertyString => {
		const { px, py, br, bgColor, bgImage } = data.style
		const styleObj = {
			padding: `${px2rpx(py as number)} ${px2rpx(px as number)}`,
			background: ''
		}
		if (bgImage) {
			styleObj.background = `url(${bgImage}) no-repeat 0 0 / ceover`
		} else {
			styleObj.background = bgColor
		}
		return removeEmptyKeys(styleObj)
	}
	
	/** 设置内层容器样式 */
	const setContentStyle = () : UTSJSONObject => {
		const { borderRadius, contentBgColor, contentBgImage, contentHeight } = data.style
		const { r1, r2, r3, r4 } = borderRadius || {}
		const styleObj = {
			borderRadius: `${px2rpx(r1 as number)} ${px2rpx(r2 as number)}  ${px2rpx(r3 as number)}  ${px2rpx(r4 as number)}`,
			background: '',
			height: '',
			overflow: 'hidden'
		}
		if(contentHeight) {
			styleObj.height = px2rpx(contentHeight)
		}
		if (contentBgImage) {
			styleObj.background = `url(${contentBgImage}) no-repeat 0 0 / ceover`
		} else {
			styleObj.background = contentBgColor
		}
		return removeEmptyKeys(styleObj)
	}
	
	onMounted(() => {
		modelContent.value = data.content as UTSJSONObject[]
		modelOptions.value = (data.options as UTSJSONObject) || {}
		modelStyle.value = (data.style as UTSJSONObject) || {}
	})

	return {
		// data
		modelOptions,
		modelStyle,
		modelContent,
		
		// methods
		setContainerStyle,
		setContentStyle
	}
}