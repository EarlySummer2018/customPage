<template>
	<view class="com-image-zone">
		<!-- <com-component-style :curStyle="curData.style || null"> -->
			<com-image
				:src="moduleOptions.bgImg"
				:tr="moduleStyle.imgTR"
				:br="moduleStyle.imgBR"
				mode="widthFix"
			></com-image>
			<view
				class="com-image-zone_item"
				v-for="(item, index) in moduleContent"
				:style="{
					transform: `translate(${px2rpx(item.x)}, ${px2rpx(item.y)})`,
					width: px2rpx(item.width),
					height: px2rpx(item.height),
					zIndex: index + 3,
				}"
				@click="handleJump(item.link)"
			>	
				<view class="com-image-zone_item-content">
					<view class="com-image-zone_item-title" v-show="item.showTitle">
						<text class="txt">{{ item.title }}</text>
					</view>
					<view v-show="item.showDot" class="click-dot"></view>
				</view>
			</view>
		<!-- </com-component-style> -->
	</view>
</template>
<script lang="uts" setup>
	import { px2rpx, handleJump } from '@/utils'
	import { ModuleContent, ModuleOptions, ModuleStyle } from './type'
	const props = defineProps({
		moduleData: {
			type: Object as PropType<UTSJSONObject>,
			required: true,
			default: () : UTSJSONObject => ({})
		}
	})
	/** 组件数据 */
	const moduleContent = ref<ModuleContent[]>([])
	/** 组件属性 */
	const moduleOptions = ref<ModuleOptions>({
		bgImg: ''
	})
	/** 组件样式 */
	const moduleStyle = ref<ModuleStyle>({
		imgTR : 0,
		imgBR : 0,
	})
	onMounted(()=>{
		moduleContent.value = props.moduleData['content'] as ModuleContent[]
		moduleOptions.value = props.moduleData['options'] as ModuleOptions
		moduleStyle.value = props.moduleData['style'] as ModuleStyle
	})
</script>
<style lang="scss">
	.com-image-zone {
		position: relative;
		&_item {
			position: absolute;
			top: 0;
			left: 0;
			background-position: 50% center;
			background-size: 100%;
			background-repeat: no-repeat;
			&-content {
				position: absolute;
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
				display: flex;
				align-items: center;
				flex-direction: column;
				justify-content: center;
				z-index: 2;
				pointer-events: none;
			}
			&-title {
				position: relative;
				font-size: 16rpx;
				color: white;
				background-color: rgba($color: #000000, $alpha: 0.8);
				padding: 6rpx 20rpx;
				border-radius: 40rpx;
				margin-bottom: 10rpx;
				display: inline-block;
				&::after {
					position: absolute;
					content: '';
					width: 0;
					height: 0;
					bottom: -14rpx;
					left: 50%;
					border: 8rpx solid transparent;
					border-top-color: #000000;
					transform: translateX(-50%);
				}
			}
			.click-dot {
				position: relative;
				width: 20rpx;
				height: 20rpx;
				&::before {
					position: absolute;
					content: '';
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					background-color: rgba($color: #000000, $alpha: 1);
					border-radius: 50%;
				}
				&::after {
					position: absolute;
					content: '';
					top: 50%;
					left: 50%;
					width: 50%;
					height: 50%;
					transform: translate(-50%, -50%);
					background-color: #fff;
					border-radius: 50%;
				}
			}
		}
	}
</style>
