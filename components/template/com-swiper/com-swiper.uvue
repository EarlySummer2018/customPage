<template>
	<view class="com-swiper_warp"
		:style="setContainerStyle()">
		<swiper class="com-swiper"
			:style="setContentStyle()"
			:circular="modelOptions.circular"
			:vertical="modelOptions.vertical"
			:interval="modelOptions.interval"
			:autoplay="modelOptions.autoplay"
			:indicator-dots="false"
			:rebound="false"
			@change="handleChangeSwiper">
			<swiper-item class="com-swiper-item"
				v-for="item in modelContent"
				:key="item.id"
				@click="handleJump(item.link)">
				<com-image :src="item.src"
					mode="aspectFill"></com-image>
			</swiper-item>
		</swiper>
		<view class="indicator-dots"
			:style="setDotContainerStyle()">
			<view class="indicator-dots-item"
				:style="setDotStyle()"
				:class="{
					'active-dot': item === currentActiveSwiper
				}"
				v-for="item in modelContent.length"
				:key="item">
			</view>
		</view>
	</view>
</template>

<script setup
	lang="uts">
	import { handleJump, px2rpx, removeEmptyKeys } from '@/utils';
	import { DotStyle, ModelStyle, ModelOptions, ModelContent, BorderRadius } from './type';
	const props = defineProps({
		modelData: {
			type: Object as PropType<UTSJSONObject>,
			required: true,
			default: () : UTSJSONObject => ({})
		}
	})
	/** 组件数据 */
	const modelContent = ref<ModelContent[]>([])
	/** 组件属性 */
	const modelOptions = ref<ModelOptions>({
		circular: true,
		vertical: true,
		interval: 3000,
		autoplay: true,
	})
	/** 组件样式 */
	const modelStyle = ref<ModelStyle>({
		bgColor: '#f6f6f7',
		px: 10,
		py: 10,
		contentBgColor: '#fff',
		contentHeight: 35,
		borderRadius: {
			r1: 5,
			r2: 5,
			r3: 5,
			r4: 5
		},
		bgImage: '',
		contentBgImage: ''
	})
	/** 指示器样式 */
	const dotStyle = ref<DotStyle>({
		size: 6,
		mx: 2,
		bottom: 10,
		pb: 10,
		justifyContent: 'center'
	})
	
	/** 设置外层容器样式 */
	const setContainerStyle = () : UTSJSONObject => {
		const { px, py, bgColor, bgImage } = modelStyle.value
		const styleObj = {
			padding: `${px2rpx(py as number)} ${px2rpx(px as number)}`,
			background: ''
		}
		if (bgImage !== '' && bgImage != null) {
			styleObj.background = `url(${bgImage}) no-repeat 0 0 / ceover`
		} else {
			styleObj.background = bgColor
		}
		return removeEmptyKeys(styleObj)
	}
	
	/** 设置内层容器样式 */
	const setContentStyle = () : UTSJSONObject => {
		const { contentBgColor, contentBgImage, contentHeight } = modelStyle.value
		const { r1, r2, r3, r4 } : BorderRadius = modelStyle.value.borderRadius
		const styleObj = {
			borderRadius: `${px2rpx(r1 as number)} ${px2rpx(r2 as number)}  ${px2rpx(r3 as number)}  ${px2rpx(r4 as number)}`,
			background: '',
			height: px2rpx(contentHeight),
			overflow: 'hidden'
		}
		if (contentBgImage !== '' && contentBgImage !== null) {
			styleObj.background = `url(${contentBgImage}) no-repeat 0 0 / ceover`
		} else {
			styleObj.background = contentBgColor ?? ''
		}
		return removeEmptyKeys(styleObj)
	}
	
	const setDotContainerStyle = () : UTSJSONObject => {
		const { px, py, contentHeight } = modelStyle.value
		const { size, mx, bottom, pb, justifyContent } = dotStyle.value
		const width = `calc(100% - ${px2rpx(px * 2)})`
		if (modelOptions.value.vertical) {
			const jc = {
				'flex-start': 'flex-end',
				'flex-end': 'flex-start',
				'center': 'center'
			}
			return {
				flexDirection: 'column-reverse',
				height: px2rpx(contentHeight),
				width: px2rpx(size),
				right: px2rpx(px + bottom),
				bottom: px2rpx(py),
				justifyContent: jc[justifyContent],
			}
		}
		const h = size + pb
		return {
			width,
			height: px2rpx(h  as number),
			left: px2rpx(px),
			bottom: px2rpx(px),
			paddingBottom: px2rpx(pb as number),
			justifyContent,
		}
	}
	
	const setDotStyle = () : UTSJSONObject => {
		const { size, mx } = dotStyle.value
		return {
			width: px2rpx(size as number),
			height: px2rpx(size as number),
			margin: modelOptions.value.vertical ? `${px2rpx(mx as number)} 0` : `0 ${px2rpx(mx as number)}`
		}
	}
	
	const currentActiveSwiper = ref<number>(0)
	
	const handleChangeSwiper = (event : UniSwiperChangeEvent) => {
		currentActiveSwiper.value = event.detail.current
	}
	
	onMounted(()=>{
		modelContent.value = props.modelData['content'] as ModelContent[]
		modelOptions.value = props.modelData['options'] as ModelOptions
		modelStyle.value = props.modelData['style'] as ModelStyle
		dotStyle.value = props.modelData['dotStyle'] as DotStyle
	})
</script>

<style lang="scss">
	.com-swiper_warp {
		position: relative;

		.com-swiper {
			width: 100%;
			background-color: transparent;

			&-item {
				width: 100%;
				height: 100%;
			}
		}

		.indicator-dots {
			position: absolute;
			width: 100%;
			height: 20rpx;
			display: flex;
			align-items: center;
			flex-direction: row;
			justify-content: center;

			&-item {
				height: 20rpx;
				width: 20rpx;
				border-radius: 100rpx;
				background-color: paleturquoise;

				&.active-dot {
					background-color: #fff;
				}
			}
		}
	}
</style>