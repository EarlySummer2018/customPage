<template>
	<view class="com-search_warp" :style="setContainerStyle()">
		<view class="com-search-logo" :style="setIconStyle('logo')" v-if="isShowIcon('logo', 'left')">
			<com-image :showErrMsg="false" :src="modelOptions.logo"></com-image>
		</view>
		<view class="com-search" :style="setContentStyle()" @click="handleJump(modelOptions.link as LinkItem)">
			<view class="com-search-icon" :style="setIconStyle('icon')" v-if="modelOptions.icon">
				<com-image :showErrMsg="false" :src="modelOptions.icon"></com-image>
			</view>
			<text class="com-search-placeholder" :style="setPlaceHolderStyle()">
				{{modelOptions.placeholder}}
			</text>
		</view>
		<view class="com-search-logo" :style="setIconStyle('logo')" v-if="isShowIcon('logo', 'right')">
			<com-image :showErrMsg="false" :src="modelOptions.logo"></com-image>
		</view>
	</view>
</template>

<script lang="uts" setup>
	import { handleJump, px2rpx, removeEmptyKeys, LinkItem } from '@/utils';
	import { InputStyle, ModelOptions, ModelStyle, BorderRadius } from './type';
	const props = defineProps({
		modelData: {
			type: Object as PropType<UTSJSONObject>,
			required: true,
			default: () : UTSJSONObject => ({})
		},
		disabled: {
			type: Boolean,
			default: false
		}
	})

	/** 组件属性 */
	const modelOptions = ref<ModelOptions>({
		placeholder: '请输入搜索关键字',
		icon: null,
		logo: null,
		logoPosition: 'right',
		link: null
	})
	/** 组件样式 */
	const modelStyle = ref<ModelStyle>({
		bgColor: '#f6f6f7',
		px: 10,
		py: 10,
		logoSize: 20,
		contentBgColor: '#fff',
		contentHeight: 35,
		borderRadius: {
			r1: 5,
			r2: 5,
			r3: 5,
			r4: 5
		},
		bgImage: '',
		contentBgImage: ''
	})
	/** 输入框样式 */
	const inputStyle = ref<InputStyle>({
		px: 10,
		py: 10,
		iconSize: 12,
		fontSize: 12,
		color: '#000',
		justifyContent: 'flex-start'
	})

	/** 设置外层容器样式 */
	const setContainerStyle = () : UTSJSONObject => {
		const styleObj = {
			padding: `${px2rpx(modelStyle.value.py as number)} ${px2rpx(modelStyle.value.px as number)}`,
			background: ''
		}
		if (modelStyle.value.bgImage !== '' && modelStyle.value.bgImage != null) {
			styleObj.background = `url(${modelStyle.value.bgImage}) no-repeat 0 0 / ceover`
		} else if (modelStyle.value.bgColor != '') {
			styleObj.background = modelStyle.value.bgColor
		}
		return removeEmptyKeys(styleObj)
	}

	/** 设置内层容器样式 */
	const setContentStyle = () : UTSJSONObject => {
		const { r1, r2, r3, r4 } : BorderRadius = modelStyle.value.borderRadius
		const styleObj = {
			borderRadius: `${px2rpx(r1 as number)} ${px2rpx(r2 as number)}  ${px2rpx(r3 as number)}  ${px2rpx(r4 as number)}`,
			background: '',
			height: px2rpx(modelStyle.value.contentHeight as number),
			overflow: 'hidden',
			padding: `${px2rpx(inputStyle.value.py as number)} ${px2rpx(inputStyle.value.px as number)}`,
			justifyContent: inputStyle.value.justifyContent,
		}
		if (modelStyle.value.contentBgImage !== '' && modelStyle.value.contentBgImage != null) {
			styleObj.background = `url(${modelStyle.value.contentBgImage}) no-repeat 0 0 / ceover`
		} else if (modelStyle.value['contentBgColor'] != null) {
			styleObj.background = modelStyle.value['contentBgColor'] as string
		}
		return removeEmptyKeys(styleObj)
	}

	const setIconStyle = (type ?: string) : UTSJSONObject => {
		if (type === 'logo') {
			return {
				width: px2rpx(modelStyle.value.logoSize as number),
				height: px2rpx(modelStyle.value.logoSize as number),
				marginLeft: modelOptions.value.logoPosition === 'right' ? '20rpx' : '0px',
				marginRight: modelOptions.value.logoPosition === 'left' ? '20rpx' : '0px'
			}
		}
		return {
			width: px2rpx(inputStyle.value.iconSize as number),
			height: px2rpx(inputStyle.value.iconSize as number)
		}
	}
	const setPlaceHolderStyle = () : UTSJSONObject => {
		return {
			fontSize: px2rpx(inputStyle.value.fontSize as number),
			color: inputStyle.value.color
		}
	}

	const isShowIcon = (key : string, position ?: string) : boolean => {
		if (key === 'icon') {
			return modelOptions.value.icon !== null ? true : false
		}
		const flag = modelOptions.value.logo !== null ? true : false
		return modelOptions.value.logoPosition === position && flag
	}

	onMounted(() => {
		modelOptions.value = props.modelData['options'] as ModelOptions
		modelStyle.value = props.modelData['style'] as ModelStyle
		inputStyle.value = props.modelData['inputStyle'] as InputStyle
	})
</script>

<style lang="scss">
	.com-search_warp {
		flex-direction: row;
		align-items: center;

		.com-search-logo {
			margin-right: 20rpx;
			flex-shrink: 0;
		}

		.com-search {
			flex: 1;
			display: flex;
			align-items: center;
			flex-direction: row;
			justify-content: center;

			&-icon {
				height: 100%;
				background-color: pink;
			}

			&-placeholder {
				margin-left: 10rpx;
			}
		}
	}
</style>